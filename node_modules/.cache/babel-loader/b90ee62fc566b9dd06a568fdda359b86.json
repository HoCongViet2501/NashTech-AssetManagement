{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/go/frontend/src/components/ChangePassword.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Modal } from 'react-bootstrap';\nimport { useState, useEffect } from 'react';\nimport { getUpdatePass } from '../api/getUpdatePassword';\nimport { Route, useHistory } from 'react-router';\nimport { SuccessChange } from './SuccessChange';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ChangePass = () => {\n  _s();\n\n  let history = useHistory();\n  const [userRequest, setUserRequest] = useState({\n    username: localStorage.getItem(\"username\"),\n    email: localStorage.getItem(\"email\"),\n    password: \"\",\n    newPassword: \"\"\n  });\n  const [isInvalid, setIsInvalid] = useState(false);\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  const [message, setMessage] = useState(\"\");\n  const [isFilled, setIsFilled] = useState(false);\n\n  const handleFilled = userRequest => {\n    if (!userRequest.password == \"\" && !userRequest.newPassword == \"\") {\n      setIsFilled(true);\n    } else if (userRequest.password === \"\" || userRequest.newPassword === \"\") {\n      setIsFilled(false);\n    }\n  };\n\n  const handleChangePass = async () => {\n    let data = await getUpdatePass(userRequest);\n\n    if (data == null) {\n      setIsInvalid(true);\n      setMessage(\"Your password is incorrect\");\n    } else if (data.message === \"\") {\n      setIsInvalid(true);\n      setMessage(\"Your password is incorrect\");\n    } else if (data.message === \"SUCCESS_CHANGE_PASSWORD\") {\n      setIsInvalid(false);\n      setShow(false);\n    }\n  };\n\n  useEffect(() => handleFilled(userRequest), [userRequest]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"default\",\n      onClick: handleShow,\n      children: \"Change password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      onHide: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            class: \"h3 text-danger\",\n            children: \"Change password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 34\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"flex flex-column mx-auto bg-white p-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: `alert alert-danger my-2 ${isInvalid ? \"\" : \"d-none\"}`,\n            role: \"alert\",\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-label text-secondary\",\n              htmlFor: \"password\",\n              children: \"Current password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              class: \"form-control\",\n              onChange: e => setUserRequest({ ...userRequest,\n                password: e.target.value\n              }),\n              type: \"password\",\n              value: userRequest.password,\n              id: \"password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-column mt-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-label text-secondary\",\n              htmlFor: \"password\",\n              children: \"New password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              class: \"form-control\",\n              onChange: e => setUserRequest({ ...userRequest,\n                newPassword: e.target.value\n              }),\n              type: \"password\",\n              value: userRequest.newPassword,\n              id: \"newPassword\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: handleClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), isFilled ? /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"danger\",\n          onClick: () => handleChangePass(),\n          children: \"Change password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"danger\",\n          disabled: true,\n          children: \"Change password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ChangePass, \"NT2ReiQjjcrUTkP238FV4eMo7m0=\", false, function () {\n  return [useHistory];\n});\n\n_c = ChangePass;\nexport default ChangePass;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangePass\");","map":{"version":3,"sources":["/home/ubuntu/go/frontend/src/components/ChangePassword.js"],"names":["Button","Modal","useState","useEffect","getUpdatePass","Route","useHistory","SuccessChange","Link","ChangePass","history","userRequest","setUserRequest","username","localStorage","getItem","email","password","newPassword","isInvalid","setIsInvalid","show","setShow","handleClose","handleShow","message","setMessage","isFilled","setIsFilled","handleFilled","handleChangePass","data","e","target","value"],"mappings":"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","sourcesContent":["import { Button, Modal } from 'react-bootstrap';\nimport { useState, useEffect } from 'react';\nimport { getUpdatePass } from '../api/getUpdatePassword';\nimport { Route, useHistory } from 'react-router';\nimport { SuccessChange } from './SuccessChange';\nimport { Link } from 'react-router-dom';\n\n\nconst ChangePass = () => {\n    let history = useHistory();\n\n    const [userRequest, setUserRequest] = useState({\n        username: localStorage.getItem(\"username\"),\n        email: localStorage.getItem(\"email\"),\n        password: \"\",\n        newPassword: \"\"\n    })\n\n    const [isInvalid, setIsInvalid] = useState(false);\n\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    const [message, setMessage] = useState(\"\");\n\n    const [isFilled, setIsFilled] = useState(false);\n\n    const handleFilled = (userRequest) => {\n        if (!userRequest.password == \"\" && !userRequest.newPassword == \"\") {\n            setIsFilled(true);\n        } else if (userRequest.password === \"\" || userRequest.newPassword === \"\") {\n            setIsFilled(false);\n        }\n    }\n\n    const handleChangePass = async () => {\n        let data = await getUpdatePass(userRequest);\n        if (data == null) {\n            setIsInvalid(true)\n            setMessage(\"Your password is incorrect\")\n        }else if (data.message ===\"\"){\n            setIsInvalid(true)\n            setMessage(\"Your password is incorrect\")\n        }\n         else if (data.message === \"SUCCESS_CHANGE_PASSWORD\") {\n            setIsInvalid(false);\n            setShow(false);\n        }\n\n    }\n\n    useEffect(() => handleFilled(userRequest),[userRequest]);\n\n    return (\n        <>\n            <Button variant=\"default\" onClick={handleShow}>\n                Change password\n            </Button>\n\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title><p class=\"h3 text-danger\">Change password</p></Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <form className=\"flex flex-column mx-auto bg-white p-3\">\n                        <div\n                            class={`alert alert-danger my-2 ${isInvalid ? \"\" : \"d-none\"}`}\n                            role=\"alert\"\n                        >\n                            {message}\n                            { }\n                        </div>\n                        <div>\n                            <label className=\"form-label text-secondary\" htmlFor=\"password\">\n                                Current password\n                            </label>\n                            <input\n                                class=\"form-control\"\n                                onChange={(e) => setUserRequest({ ...userRequest, password: e.target.value })}\n                                type=\"password\"\n                                value={userRequest.password}\n                                id=\"password\"\n                            />\n\n                        </div>\n                        <div className=\"flex flex-column mt-2\">\n                            <label className=\"form-label text-secondary\" htmlFor=\"password\">\n                                New password\n                            </label>\n                            <input\n                                class=\"form-control\"\n                                onChange={(e) => setUserRequest({ ...userRequest, newPassword: e.target.value })}\n                                type=\"password\"\n                                value={userRequest.newPassword}\n                                id=\"newPassword\"\n                            />\n                        </div>\n\n\n                    </form>\n\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Cancel\n                    </Button>\n                    {isFilled ? (\n                        <Button variant=\"danger\" onClick={() => handleChangePass()}>\n                            Change password\n                        </Button>\n                    ) :\n                        <Button variant=\"danger\" disabled>\n                            Change password\n                        </Button>}\n\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\nexport default ChangePass\n"]},"metadata":{},"sourceType":"module"}